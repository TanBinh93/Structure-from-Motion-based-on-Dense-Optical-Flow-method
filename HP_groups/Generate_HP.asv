%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Authors: Tan-Binh Phan, Dinh-Hoan Trinh, Christian Daul, Didier Wolf   %
%  Contact: tan-binh.phan@univ-lorraine.fr                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Objective: Determination of HP-Groups (groups of homologous point)
%    Input : + image_path: full path of images. 
%            + format_images: png, jpg, tif, etc. 
%            + pg: parameters for determination of homologous points
%                  pg.tau: a threshold for overlapping region between two images.
%                  pg.epsilon: a threshold value ensures an accurate pixel correspondence.
%                  pg.h: a grid size.
%
%   Output : + HP_groups: groups of homologous point. A group contains the views and 2D point on each view. 
%            + Vset: Object for managing data. It includes the set of 2D points on each view, the
%                    homologous point between two views (if they are connected).
%
%  In this function, we use: + forward_consecutive_OF.m and backward_consecutive_OF.m  for forward and backward optical flow computation.
%                            + Reference_images.m for determination of reference images.
%                            + Mask_inac.m for computing a binary mask  between two images which allows us to remove the inaccurate homologous point pairs.    
%                            + Mask_SR.m for computing the regions between two images which are not afftected by the specular reflections.                                                 
%                            
%
function [HP_groups,vSet] = Generate_HP(image_path,format_images,pg)
%% Read images
images = Read_images(image_path,format_images);
% The size of image
[M,N,C] = size(images{1});

% The set of points for each images
Homologous_Points = cell(1,numel(images));

% Object for managing data: the 2D points for each image and matching points between them
vSet = viewSet;
matches = {}; % object for saving the matches between images

%% Computing the optical flow forward 
% OF forward between each pair of consecutive image: Using function forward_consecutive_OF.m
[U1,V1] = forward_consecutive_OF(image_path,format_images);

%% Determination of reference images ans homologous points between images
% Determination of reference images
% Omega_ref: The reference images; Set_Ovv_ref: It consists of the set of overlapping images with each reference image.
[Omega_ref,Set_Ovv_ref] = Reference_images(image_path,U1,V1,pg.tau,format_images); 
[val, idx] = find(Omega_ref == 1);
if length(idx)>1
    Omega_ref(idx(2):end) = [];
end

% An example for generating 2D points for each reference images with size pg.h
k = 1;
for h = 10:(pg.h):M-10
    for j = 10:(pg.h):N-10
        OF_points(k,:) = [j h];
        k = k + 1;
    end
end
Homologous_Points{1,Omega_ref(1)} = OF_points;

% Save 2D points of each reference images
vSet = addView(vSet, Omega_ref(1), 'Points',  Homologous_Points{1,Omega_ref(1)});
if length(Omega_ref)>1
    for i = 2:length(Omega_ref)
        Homologous_Points{1,Omega_ref(i)} = Homologous_Points{1,Omega_ref(1)};
        tf1 = hasView(vSet,Omega_ref(i));
        if tf1 == 1
            vSet = updateView(vSet, Omega_ref(i), 'Points',  Homologous_Points{1,Omega_ref(i)});
        else
            vSet = addView(vSet, Omega_ref(i), 'Points',  Homologous_Points{1,Omega_ref(i)});
        end
    end
end

% Determination of homologous points between a reference image I_k^{ref} and  each image I_j belongs to the set of overlapping images with it
for i = 1:length(Omega_ref)
    tempt = Set_Ovv_ref{1,Omega_ref(i)}; 
    for j = 1:length(Set_Ovv_ref{1,Omega_ref(i)})
        % Compute the optical flow forward between reference image I_k^{ref} and an image I_j
        [flow] = tvFlow_calc(images{Omega_ref(i)}, images{tempt(j)});
        u1 = flow(:, :, 1); v1 = flow(:, :, 2);
        % Compute the optical flow backward between reference image I_k^{ref} and an image I_j
        [flow] = tvFlow_calc(images{tempt(j)}, images{Omega_ref(i)});
        u2 = flow(:, :, 1); v2 = flow(:, :, 2);
        % Compute the specular reflection mask and inaccurate mask between reference image I_k^{ref} and an image I_j
        Mask_sr = Mask_SR(images{Omega_ref(i)}, images{tempt(j)}); 
        Mask_inacc  = Mask_inac(M,N,u1,v1,u2,v2, pg.epsilon);
        
%         We also can crop the two sub-images of overlapping regions extracted from I_k^{ref} and I_j and then determine the homologous points between them. 
%         [I1_crop,I2_crop,L,vector_movv] = Crop_Ovverlapping(image_path,U1,V1,Omega_ref(i),tempt(j),numel(images),format_images);
%         [flow] = tvFlow_calc(I1_crop, I2_crop, st);
%         u1 = flow(:, :, 1); v1 = flow(:, :, 2);
%         [flow] = tvFlow_calc(I2_crop, I1_crop, st);
%         u2 = flow(:, :, 1); v2 = flow(:, :, 2); [M1,N1,C1] = size(I1_crop);
%         Mask_sr = Mask_SR(I1_crop, I2_crop); Mask_inacc  = Mask_inac(M1,N1,u1,v1,u2,v2, pg.epsilon);

        % Compute the homologous points between reference image I_k^{ref} reference image I_k^{ref} and an image I_j
        points1 = Homologous_Points{1,Omega_ref(i)}; tempt1 = []; OFmatch1 = [];
        % OFmatch1 is the 2D points of reference image i that satisfied the masks of inaccurate and SR, tempt1 includes the corresponding points of OFmatch1 in image j
        for k = 1:length(points1)
            if (Mask_inacc(round( points1(k,2)),round(points1(k,1))) == 1) && (Mask_sr(round( points1(k,2)),round(points1(k,1))) >= 1)
                a = points1(k,:) + [u1(round(points1(k,2)),round(points1(k,1))) v1(round(points1(k,2)),round(points1(k,1)))];
                OFmatch1 = [OFmatch1;points1(k,:)]; 
                tempt1 = [tempt1;a];
            end
        end
        Homologous_Points{1,tempt(j)} = [Homologous_Points{1,tempt(j)};tempt1];
        % Save the homologous points of reference image I_k^{ref} and an image I_j
        if isempty(OFmatch1) ~= 1
            tf1 = hasView(vSet,tempt(j));
            if tf1 == 1
                vSet = updateView(vSet, tempt(j), 'Points',  Homologous_Points{1,tempt(j)});
            else
                vSet = addView(vSet, tempt(j), 'Points',  Homologous_Points{1,tempt(j)});
            end
            % Find the index of matches
            [Lia,Locb] = ismember(OFmatch1,Homologous_Points{1,Omega_ref(i)},'rows');
            [Lia1,Locb2] = ismember(tempt1,Homologous_Points{1,tempt(j)},'rows');
            % The index of matches between reference image I_k^{ref} and an image I_j
            matches{Omega_ref(i),tempt(j)} = [Locb Locb2];
        else
            tempt(j) = NaN;
        end
    end
end

%% Determination of homologous point groups (HP-Groups)
for i = 1:length(Omega_ref)
    tempt = Set_Ovv_ref{1,Omega_ref(i)};
    for j = 1:length(Set_Ovv_ref{1,Omega_ref(i)})
        if ~isempty(matches{Omega_ref(i),tempt(j)})
            tf = hasConnection(vSet,Omega_ref(i),tempt(j));
            if tf == 1
                vSet = updateConnection(vSet, Omega_ref(i), tempt(j), 'Matches', matches{Omega_ref(i),tempt(j)});
            else
                vSet = addConnection(vSet, Omega_ref(i), tempt(j), 'Matches', matches{Omega_ref(i),tempt(j)});
            end
        end
    end
end
% Point groups determination
HP_groups = findTracks(vSet);
